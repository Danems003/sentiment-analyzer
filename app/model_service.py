import json
from kafka import KafkaConsumer, KafkaProducer
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
model_path = "sentiment_model_itog"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSequenceClassification.from_pretrained(model_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka
consumer = KafkaConsumer(
    'text',
    bootstrap_servers='kafka:9092',
    auto_offset_reset='earliest',
    group_id='ml-group',
    value_deserializer=lambda m: json.loads(m.decode('utf-8'))
)

producer = KafkaProducer(
    bootstrap_servers='kafka:9092',
    value_serializer=lambda m: json.dumps(m).encode('utf-8')
)

print("üì° ML-—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω...")

for message in consumer:
    text = message.value.get("text", "")
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        predicted_class_id = logits.argmax().item()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –º–µ—Ç–∫—É
    label = model.config.id2label[predicted_class_id]

    result = {"sentiment": label}
    producer.send("result-topic", result)
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç: {text} ‚Üí {label}")
